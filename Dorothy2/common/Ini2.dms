//Dorothy2
//caption=Ini2
//version=0.1
//hint=
//match=
//author=wan
//path=common
//end

/*
Copyright (C) 2015 wan <thewanwan111@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

(function(){

void function Ini2(filename, def){
	this.data = {};
	this.setFileName(filename || '');
	this.load();
	if(def) this.typeConversion(def);
};
Ini2.prototype.setFileName = function(filename){
	this.filename = filename;
	this.filename = this.getFileName();
	return this;
};
Ini2.prototype.getFileName = function(){
	var path = this.filename || Dorothy.matchFile + '.ini';
	if(!/^[a-z]:/i.test(path)){
		common_load('DorothyEx');
		path = DorothyEx.getUserPath() + path.replace('^\s*\\', '');
	}
	return path;
};
Ini2.prototype.load = function(){
	var sec, key, value, line,
		isSec = false,
		sl = new Strings(),
		filename = this.getFileName(),
		data = this.data = {};
	if(new File(filename).exists()){
		sl.loadFromFile(filename);
		for(var i in sl){
			line = sl[i].trim();
			if(line == '' || line[0] == ';') continue;
			if(/^\[(.*)\]$/.test(line)){
				isSec = true;
				sec = RegExp.$1.trim();
				if(typeof data[sec] != 'object') data[sec] = {};
			}else if(isSec && /^([^=]*)=(.*)/.test(line)){
				key = RegExp.$1.trim();
				value = RegExp.$2.trim();
				data[sec][key] = value;
			}
		}
	}
	return this;
};
Ini2.prototype.typeConversion = function(obj){
	common_load('extend');
	if(typeof this.data != 'object') this.data = {};
	obj = extend(true, {}, obj);
	var v, v2, type1, type2,
		data = this.data;
	for(var sec in obj){
		if(typeof data[sec] == 'undefined' || typeof obj[sec] != 'object'){
			data[sec] = obj[sec];
			continue;
		}
		for(var key in obj[sec]){
			v1 = obj[sec][key];
			type1 = typeof v1;
			type2 = typeof data[sec][key];
			v2 = type2 == 'undefined' ? null : data[sec][key];
			if(type1 == type2) continue;
			switch(type1){
				case 'string':
					try{
						data[sec][key] = '' + v2;
					}catch(){
						data[sec][key] = v1;
					}
					break;
				case 'number':
					data[sec][key] = isFinite(v2) ? parseFloat(v2) : v1;
					break;
				case 'boolean':
					data[sec][key] = v2 == 'true' || v2 == 'false' ? v2 == true : v1;
					break;
				case 'null':
					data[sec][key] = null;
					break;
				default:
					data[sec][key] = v1;
			}
		}
	}
	return this;
};
Ini2.prototype.getData = function(def){
	common_load('extend');
	return extend(true, {}, def, this.data);
};
Ini2.prototype.setData = function(data){
	common_load('extend');
	this.data = extend(true, {}, data);
	return this;
};
Ini2.prototype.deleteKey = function(section, key){
	if(isUndefined(section) || isUndefined(key)) throw 'Ini2 deleteKey error';
	var data = this.data;
	if(typeof data == 'object' && typeof data[section][key] != 'undefined'){
		data[section].removeKey(key);
	}
	return this;
};
Ini2.prototype.eraseSection = function(section){
	if(isUndefined(section)) throw 'Ini2 eraseSection error';
	var data = this.data;
	if(typeof data == 'object'){
		this.data.removeKey(section);
	}
	return this;
};
Ini2.prototype.readSection = function(section){
	if(isUndefined(section)) throw 'Ini2 readSection error';
	var data = this.data;
	var sl = new Strings();
	if(typeof data == 'object' && typeof data[section] != 'undefined'){
		for(var key in data[section]){
			sl.add(key);
		}
	}
	return sl;
};
Ini2.prototype.readSections = function(){
	var data = this.data;
	var sl = new Strings();
	if(typeof data == 'object'){
		for(var sec in data){
			sl.add(sec);
		}
	}
	return sl;
};
Ini2.prototype.sectionExists = function(section){
	return typeof this.data == 'object' && typeof this.data[section] != 'undefined';
};
Ini2.prototype.write = function(section, key, value){
	if(isUndefined(section) || isUndefined(key) || isUndefined(value)) throw 'Ini2 write error';
	if(typeof this.data != 'object') this.data = {};
	var data = this.data;
	if(typeof data[section] == 'undefined') data[section] = {};
	data[section][key] = value;
	return this;
};
Ini2.prototype.read = function(section, key, def){
	if(isUndefined(section) || isUndefined(key) || isUndefined(def)) throw 'Ini2 read error';
	var data = this.data;
	if(typeof data == 'object' && typeof data[section][key] != 'undefined'){
		return data[section][key];
	}
	return def;
};
Ini2.prototype.update = function(){
	var sec, key, value, line, addIndex, c,
		isSec = false;
		del = true,
		data = this.data,
		ini = {},
		filename = this.getFileName(),
		sl = new Strings(),
		sl2 = new Strings(),
		f = new File(filename),
		dir = new Directory(f.extractPath());
	function addKeys(sl, index, sec){
		var keys = new Strings();
		keys.sorted = true;
		for(var key in sec) keys.add(key + '=' + sec[key]);
		for(var i = keys.length - 1; i >= 0; i--) sl.insert(index, keys[i]);
	}
	if(!dir.exists()){
		dir.make();
	}

	var secName;
	for(var sec in data){
		if(typeof data[sec] != 'object') continue;
		secName = sec.trim();
		ini[secName] = {};
		for(var key in data[sec]){
			try{
				ini[secName][key.trim()] = ('' + data[sec][key]).trim();
			}catch(){}
		}
	}
	//上書き コメント等の体裁を維持
	if(f.exists()){
		sl.loadFromFile(filename);
		for(var i in sl){
			line = sl[i];
			c = line.trim().charAt(0);
			if(!(c == '' || c == ';')){
				if(/^\s*\[(.*)\]\s*$/.test(line)){
					isSec = true;
					if(!del){
						//未処理のキーを追加
						addKeys(sl2, addIndex, ini[sec]);
						ini.removeKey(sec);
					}
					sec = RegExp.$1.trim();
					del = typeof ini[sec] == 'undefined';
					if(del) continue;
					addIndex = sl2.length + 1;
				}else if(isSec && /^([^=]*)(=\s*)/.test(line)){
					key = RegExp.$1.trim();
					if(del || typeof ini[sec][key] == 'undefined') continue;
					line = RegExp.$1 + RegExp.$2 + ini[sec][key];
					ini[sec].removeKey(key);
					addIndex = sl2.length + 1;
				}
			}
			sl2.add(line);
		}
		//未処理のキーを追加
		if(!del && isSec){
			addKeys(sl2, addIndex, ini[sec]);
			ini.removeKey(sec);
		}
	}
	//新規セクションを追加
	var secs = new Strings();
	secs.sorted = true;
	for(var sec in ini) secs.add(sec);
	for(var i in secs){
		sec = secs[i];
		if(sl2.length > 0 && sl2[sl2.length - 1].trim() != '') sl2.add('');
		sl2.add('[' + sec + ']');
		addKeys(sl2, sl2.length, ini[sec]);
	}
	sl.assign(sl2);
	
	sl.saveToFile(filename);
	return this;
};


})();