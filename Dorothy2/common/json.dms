//Dorothy2
//caption=JSON
//version=0.50
//hint=
//match=
//author=wan
//path=common
//end

//http://www.ietf.org/rfc/rfc4627
//http://www.ecma-international.org/ecma-262/5.1/#sec-15.12
//なるべく規格に準拠する様にしていますが一部拡張・変更しています

JSON =
(function(){
	var Parse = {
		Esc_char: {
			'"' : '"',  //quotation mark  U+0022
			'\' : '\',  //reverse solidus U+005C
			'/' : '/',  //solidus         U+002F
			'b' : "\b", //backspace       U+0008
			'f' : "\f", //form feed       U+000C
			'n' : String.fromCharCode(0x0A), //line feed U+000A
			'r' : "\r", //carriage return U+000D
			't' : "\t"  //tab             U+0009
		},
		err: function(e, Str){
			throw 'Error JSON.parse: index(' + Str.index +  ')=>' + e;
		},
		//オブジェクトを解析する
		//呼ばれた時のStr.indexは最初の{の位置
		parseObj: function(Str){
			var obj = {}, s = Str.nextStr(), key;
			if(s == '/' && this.opts.relaxed) s = this.parseComment(Str);
			if(s == '}') return obj;//空オブジェクト
			while(s){
				if(s == '"'){
					key = this.parseStr(Str);
					s = Str.nextStr();
				}else if(s == "'"){
					if(!this.opts.relaxed) this.err("'〜'は文字列として認識しません", Str);
					key = this.parseStr_singleQuotes(Str);
					s = Str.nextStr();
				}else if(s == "/"){
					if(!this.opts.relaxed) this.err('コメントは使用できません', Str);
					s = this.parseComment(Str);
					continue;
				}else if(/^([A-Za-z_$][A-Za-z0-9_$]*) *[:\/]/.test(Str.slice(Str.index))){
					if(!this.opts.relaxed) this.err('オブジェクトのメンバー名が引用符で囲まれていない', Str);
					Str.index += RegExp.lastIndex - 1;
					key = RegExp.$1;
					s = Str[Str.index];
				}else{
					this.err('オブジェクトのメンバー名が文字列ではない', Str);
				}

				if(s != ':' && !(s == '/' && this.opts.relaxed && this.parseComment(Str) == ':')){
					this.err('オブジェクトのメンバー名の後にコロンがない', Str);
				}
				Str.nextStr();
				obj[key] = this.parseValue(Str);
				s = Str.nextStr();
				if(s == '/' && this.opts.relaxed) s = this.parseComment(Str);
				switch(s){
					case ',':
						s = Str.nextStr();
						break;
					case '}': return obj;
					default:
						if(s) this.err('オブジェクトの値がコンマで区切られていない', Str);
				}
			}
			this.err('オブジェクトが閉じていない', Str);
		},
		//配列を解析する
		//呼ばれた時のStr.indexは最初の[の位置
		parseArr: function(Str){
			var arr = [], s = Str.nextStr();
			if(s == '/' && this.opts.relaxed) s = this.parseComment(Str);
			if(s == ']') return arr;//空配列
			while(s){
				arr.push(this.parseValue(Str));
				s = Str.nextStr();
				if(s == '/' && this.opts.relaxed) s = this.parseComment(Str);
				switch(s){
					case ',':
						s = Str.nextStr();
						break;
					case ']': return arr;
					default:
						if(s) this.err('配列の値がコンマで区切られていない', Str);
				}
			}
			this.err('配列が閉じていない', Str);
		},
		//文字列を解析
		//呼ばれた時のStr.indexは最初の"の位置
		parseStr: function(Str){
			var r = '', s = '', c, start = Str.index+1;
			while(++Str.index){
				c = Str.charCodeAt(Str.index);
				switch(c){
					case 0x22: //"
						return r + Str.slice(start, Str.index);
					case 0x5c: //\
						r += Str.slice(start, Str.index);
						s = Str.next();
						if(this.Esc_char.hasKey(s)){
							s = this.Esc_char[s];
						}else if(s == 'u'){
							s = this._unescape(Str);
							if(s == '') this.err('不正なUnicode エスケープシーケンス', Str);
						}else{
							this.err('不正なエスケープシーケンス', Str);
						}
						start = Str.index + 1;
						r += s;
						break;
					case NaN: this.err('文字列が"で閉じられていない', Str);
					default:
						if(c <= 0x1F && !this.opts.relaxed) this.err('文字列中に制御文字が含まれている', Str);
				}
			}
		},//*/
		//Relaxed Mode 文字列を解析 シングルクォート
		//呼ばれた時のStr.indexは最初の'の位置
		parseStr_singleQuotes: function(Str){
			var start = Str.index + 1;
			while(++Str.index <= Str.end){
				if(Str[Str.index] == "'") return Str.slice(start, Str.index).toString();
			}
			this.err("文字列が'で閉じられていない", Str);
		},
		//数値を解析
		//呼ばれた時のStr.indexは数値の始まり[0-9\-]の位置
		parseNumber: function(Str){
			/*
			number = [ minus ] int [ frac ] [ exp ]
			decimal-point = %x2E       ; .
			digit1-9 = %x31-39         ; 1-9
			e = %x65 / %x45            ; e E
			exp = e [ minus / plus ] 1*DIGIT
			frac = decimal-point 1*DIGIT
			int = zero / ( digit1-9 *DIGIT )
			minus = %x2D               ; -
			plus = %x2B                ; +
			zero = %x30                ; 0
			*/
			var start = Str.index,
			s = Str[start],
			p = false, e = false, isZero = false;

			if(s == '-') s = Str.next();
			if(s == '0') isZero = true;
			else if(!(s | 0)) this.err('数値ではない', Str);
			//err[00, -00, 0123, 00.0, -00.0, 00e+1, 0123e1, 0123.0, 0123.1e1] ok[0e+1, 0e000, 0.000]
			//先頭から複数連続した0は禁止する
			//0の直後に指数と小数がある場合を除いて0から始まる数値は禁止する
			//00, 0[1-9] になった時点でエラー
			while(s){
				if(isZero){
					s = Str.next();
					if((s | 0 || s == '0') && !this.opts.relaxed) this.err('不正な数値 先行ゼロ', Str);
					isZero = false;
				}
				while((s | 0 || s == '0') && (s = Str.next()));
				if(s == '.'){
					if(p || e) break;//.が2回又はeの後に.がある
					p = true;
					s = Str.next();
				}else if(s == 'e' || s == 'E'){
					if(e) break;//eが2回ある
					e = true;
					s = Str.next();
					if(s == '+' || s == '-') s = Str.next();
				}else{
					Str.index -= 1;
					s = Str[Str.index];
					if(!(s | 0 || s == '0')) break;//小数点,指数の次が数字ではない場合
					var r = Str.slice(start, Str.index+1);
					return parseFloat(r.toString());
				}
			}
			this.err('不正な数値', Str);
		},
		//Relaxed Mode コメントを解析する
		//呼ばれた時のStr.indexは/の位置
		//戻り値はコメントと空白をスキップした次の文字
		parseComment: function(Str){
			var s;
			do{
				s = Str.next();
				switch(s){
					case '/': // Single Line Comment //
						while(++Str.index <= Str.end){
							s = Str[Str.index];
							if(s == this.Esc_char.n || s == this.Esc_char.r) break;
						}
						break;
					case '*': // Multi-line Comment /* */
						var index = Str.indexOf('*/', Str.index + 1);
						if(index != -1){
							Str.index = index + 1;
							break;
						}
						this.err('コメントが*/で閉じられていない', Str);
					default:
						this.err('不正なコメント', Str);
				}
				s = Str.nextStr();
			}while(s == '/');
			return s;
		},
		//値を解析する
		//呼ばれた時のStr.indexは値の最初の文字の位置
		parseValue: function(Str){
			/*
			value = false / null / true / object / array / number / string
			false = %x66.61.6c.73.65   ; false
			null  = %x6e.75.6c.6c      ; null
			true  = %x74.72.75.65      ; true
			*/
			var s = Str[Str.index];
			switch(s){
				case '"': return this.parseStr(Str);
				case '{': return this.parseObj(Str);
				case '[': return this.parseArr(Str);
				case 'f'://false
					if(Str.next(4) == 'alse') return false;
					break;
				case 't'://true
					if(Str.next(3) == 'rue') return true;
					break;
				case 'n'://null
					if(Str.next(3) == 'ull') return null;
					break;
				default://number or error or Relaxed Mode(comment or string)
					if(s | 0 || s == '0' || s == '-') return this.parseNumber(Str);
					if(this.opts.relaxed){
						if(s == '/'){
							s = this.parseComment(Str);
							if(s) return this.parseValue(Str);
						}else if(s == "'"){
							return this.parseStr_singleQuotes(Str);
						}
					}
			}
			this.err('不正な値', Str);
		},
		//rentanさんのutf8.dmsから拝借しました
		_unescape: function(Str){
			// \uXXXX ... \u0000〜\uffff
			var r = '',
			s = Str.next(4);
			if (/^[0-9a-f]{4}/i.test (s)) {
				s = parseInt ('0x' + s);  // 0〜0xffff

				var m = s & 0xfc00;
				if (m == 0xd800) {
					// high surrogate
					var s2 = Str.next(6);  //  0〜0xffff
					s2 = /^\\u[0-9a-fA-F]{4}/.test (s2) ? parseInt ('0x' + s2.slice (2)) : 0;

					if ((s2 & 0xfc00) == 0xdc00) {
						r = this.fromUnicode (0x10000 + ((s & 0x03ff) << 10) + (s2 & 0x03ff));
					}
					else {
						Str.index -= 6;
						// high surrogate の直後が low surrogate ではない
						// または Unicode エスケープシーケンスではない
						r = '[U+' + s + ']';
					}
				}
				else if (m == 0xdc00) {
					// いきなり low surrogate がきた
					r = '[U+' + s + ']';
				}
				else {
					// 基本多言語面のコードポイント
					r = this.fromUnicode (s);
				}
			}else{
				Str.index -= 4;
			}
			return r;
		},
		fromUnicode: function(u){
			if (u <= 0x7f) {
				return String.fromCharCode (u);
			}
			if (u <= 0x7ff) {
				var n1 = u >> 6;
				var n2 = u & 0x3f;
				return String.fromCharCode (n1 + 0xc0, n2 + 0x80);
			}
			if (u <= 0xffff) {
				var n1 = u >> 12;
				var n2 = (u >> 6) & 0x3f;
				var n3 = u & 0x3f;
				return String.fromCharCode (n1 + 0xe0, n2 + 0x80, n3 + 0x80);
			}
			if (u <= 0x1fffff) {
				var n1 = u >> 18;
				var n2 = (u >> 12) & 0x3f;
				var n3 = (u >> 6) & 0x3f;
				var n4 = u & 0x3f;
				return String.fromCharCode (n1 + 0xf0, n2 + 0x80, n3 + 0x80, n4 + 0x80);
			};

			return '[UTF-8 error]';
		},
		opts: null,
		parse: function(text, reviver, options){
			text = new String(text);
			function walk(src, key, path){
				var value = src[key];
				if(typeof value == 'object'){
					var isArr = nameOf(value) == 'Array';
					for(var i in value){
						value[i] = walk(value, i + '', path + (isArr ? '[' + i + ']' : '["' + i + '"]'));
						//配列の場合はundefinedのままにする(javascriptのdelete演算子を再現できないため)
						if(!isArr && isUndefined(value[i])){
							value.removeKey(i);
						}
					}
				}
				return reviver.call(src, key, value, path);
			}
			options = nameOf(options) == 'Object' ? options : {};
			this.opts = {
				eval: options.hasKey('eval') ? options.eval : false,
				relaxed: options.hasKey('relaxed') ? options.relaxed : false,
				throwError: options.hasKey('throwError') ? options.throwError : false
			};
			if(this.opts.eval && !this.opts.relaxed){
				try{
					if(JSON.check(text)){
						//eval()で消えてしまう文字と\nを置換
						text = text.replace(/\\([\/n]|u[0-9a-fA-F]{4})/g, function(a, b){
							switch(b[0]){
								case 'u': return '\' + a;
								case '/': return b;
								case 'n': return String.fromCharCode(0x0A);
								default: return a;
							}
						});
						var r = eval('(' + text + ')');
						return typeof reviver == 'function' ? walk({'': r}, '', '') : r;
					}
					throw 'Error JSON.parse: JSON文字列ではない';
				}catch(e){
					if(this.opts.throwError) throw e;
					println(e);
				}
				return;
			}
			//ASCIIのみならStringBuffer 違うならStringを使う
			var Str = /^[\s -~]+$/.test(text) ? new StringBuffer(text) : text;
			Str.index = -1;
			Str.end = Str.length - 1;
			//次の文字を取得する lenを指定した場合はlenの長さの文字列を取得
			//Str.indexは現在の位置
			Str.next = function(len){
				len = len || 1;
				var s = this.substr(this.index+1, len);
				this.index += len;
				return s;//終端に達した場合は空文字
			};
			//空白をスキップして次の文字を取得する
			Str.nextStr = function(){
				var r;
				while(++this.index <= this.end){
					switch(this.charCodeAt(this.index)){
						case 0x20:
						case 0x09:
						case 0x0D:
						case 0x0A:
							continue;
						default: return this[this.index];
					}
				}
				return '';
			};
	    	
			try{
				Str.nextStr();
				var r = this.parseValue(Str);
				var s = Str.nextStr();
				if(s == '/'){
					s = this.parseComment(Str);
				}
				if(s){ //残りが何も無いなら空文字になる
					this.err('不正な文字列', Str);
				}
			}catch(e){
				if(this.opts.throwError) throw e;
				println(e);
				return;
			}
			return typeof reviver == 'function' ? walk({'': r}, '', '') : r;
		}
	};


	var Stringify = {
		control_char: {
			0x0a: "\\n",
			0x0d: "\\r",
			0x0c: "\\f",
			0x09: "\\t",
			0x08: "\\b"
		},
		_escape: function(s){
			if(!s) return s;
			s = s.replace(/["\\]/g, '\\$0');
			//正規表現でも\nはCR+LFなので\rは必要なし
			var char = this.control_char;
			s = s.replace(/[\n\f\t\b]/g, function(m){
				return char[m.charCodeAt(0)];
			});
			if(/^[\s -~]+$/.test(s)) return s;
			return this.toUnicode(s);
		},
		//rentanさんのutf8.dmsから拝借しました
		toUnicode: function(s){
			var sb = new StringBuffer(s);
			var sb_len = sb.length;
			var result = '';
			var len, n1, n2, n3, n4, unicode;
			for(var i = 0; i < sb_len; i += len){
				n1 = sb.charCodeAt(i);
				if(n1 <= 0x1f){
					len = 1;
					unicode = n1;
				}
				else if (n1 <= 0x7f) {
					len = 1;
					result += sb[i];
					continue;
				}
				else if (n1 <= 0xc1) {// 0x80-0xc1 不正なコード
					len = 1;
					result += sb[i];
					continue;
				}
				else if (n1 <= 0xdf) {
					len = 2;
					n1 = n1 & 0x1f;
					n2 = sb.charCodeAt (i + 1) & 0x3f;
					unicode = (n1 << 6) + n2;
				}
				else if (n1 <= 0xef) {
					len = 3;
					n1 = n1 & 0x0f;
					n2 = sb.charCodeAt (i + 1) & 0x3f;
					n3 = sb.charCodeAt (i + 2) & 0x3f;
					unicode = (n1 << 12) + (n2 << 6) + n3;
				}
				else if (n1 <= 0xf7) {
					len = 4;
					n1 = n1 & 0x07;
					n2 = sb.charCodeAt (i + 1) & 0x3f;
					n3 = sb.charCodeAt (i + 2) & 0x3f;
					n4 = sb.charCodeAt (i + 3) & 0x3f;
					unicode = (n1 << 18) + (n2 << 12) + (n3 << 6) + n4;
				}
				else {// 0xf8-0xff 不正なコード
					len = 1;
					result += sb[i];
					continue;
				}
				result += format('\u%.4x', parseInt(unicode));
			}
			return result;
		},
		getOwnProperties: function(obj){
			var keys, key,
				r = [],
				defaultMethods = /^(getEvents|getProperties|hasOwnProperty|getKeys|hasKey|valueOf|removeKey|toString|getMethods|constructor)$/,
				isPlainObject = nameOf(obj) == 'Object';
			if(typeof obj.getKeys == 'function'){
				keys = obj.getKeys();
				for(var i = 0; i < keys.length; i++){
					key = keys[i];
		
					if(isPlainObject){
						if(Object.hasKey(key)) continue;
					}else{
						if(defaultMethods.test(key)) continue;
					}
					r.push(key);
				}
			}
			//folderdata等はgetKeysで取得できないため
			if(!r.length){
				for(key in obj){
					r.push(key);
				}
			}
			return r;
		},
		toStr: function(src, key, space, path){
			var value = src[key];
			//toJSON
			if(typeof value.toJSON == 'function') value = value.toJSON(key);
			//replacer関数
			if(this.repType == 'function'){
				value = this.rep.call(src, key, value, path);
			}
			switch(typeof value){
				case 'string':
					var r = this.opts.encode ? this._escape(value) : value;
					return this.opts.strQuotes[0] + r + this.opts.strQuotes[1];
				case 'number': return isFinite(value) ? value.toString() : 'null';
				case 'boolean': return value.toString();
				case 'null': return 'null';
				case 'function':
				case 'undefined': return;//undefinedを返す
				case 'object':
					switch(nameOf(value)){
						case 'String':
						case 'StringList':
						case 'StringBuffer':
						case 'Cookie':
							var r = this.opts.encode ? this._escape(value.toString()) : value;
							return this.opts.strQuotes[0] + r + this.opts.strQuotes[1];
						case 'Number': return isFinite(value) ? value.toString() : 'null';//非数(infinity等)の場合はnullとする
						case 'Boolean': return value.toString();
						case 'Date':
							var r, oldFormat = value.format;
							value.format = 'yyyy-mm-dd"T"hh:mm:ss.zzz"Z"';//ISO 8601 Extended Format
							r = value.toUTCString();
							value.format = oldFormat;
							return this.opts.strQuotes[0] + r + this.opts.strQuotes[1];
						case 'Array':
							var s = [], sp = space + this.indent;
							if(this.check(value)){
								for(var i = 0; i < value.length; i++){
									s.add(this.toStr(value, i + '', sp, path + '[' + i + ']') || 'null');
								}
								this.cache.pop();
							}else if(this.opts.throwError){
								this.cache = null;
								this.cache = [];
								throw 'Error JSON.stringify: 値が循環参照になっている';
							}
							sp = this.lf + sp;
							return s.length ? '[' + sp + s.join(this.opts.comma + sp) + this.lf + space + ']' : '[]';
						default:
							var s = [], sp = space + this.indent, v, propertyList, key, type;
							if(this.check(value)){
								propertyList = this.repType == 'Array' ? this.rep : this.getOwnProperties(value);

								for(var i = 0; i < propertyList.length; i++){
									key = propertyList[i];
									type = typeof key;
									if(type != 'string' && type != 'number' && (type = nameOf(key)) != 'String' && type != 'Number') continue;
									key = key + '';
									if(typeof value[key] != 'undefined'){
										v = this.toStr(value, key, sp, path + '["' + key + '"]');
										if(!isUndefined(v)){
											s.add(this.opts.keyQuotes[0] + (this.opts.encode ? this._escape(key) : key) + this.opts.keyQuotes[1] + this.opts.colon + v);
										}
									}
								}
								this.cache.pop();//現在の階層を含む上位階層のみをチェックの対象にする
							}else if(this.opts.throwError){
								this.cache = null;
								throw 'Error JSON.stringify: 値が循環参照になっている';
							}
							sp = this.lf + sp;
							return s.length ? '{' + sp + s.join(this.opts.comma + sp) + this.lf + space + '}' : '{}';
					}
			}
			return;//undefinedを返す
		},
		//循環参照のチェック
		cache: [],
		check: function(obj){
			for(var i in this.cache){
				if(this.cache[i] === obj) return false;
			}
			return this.cache.push(obj);
		},
		lf: null,
		indent: null,
		rep: null,
		repType: null,
		opts: null,
		stringify: function (value, replacer, space, options){
			this.lf = '', this.indent = '', this.cache = [];
			switch(nameOf(space) || typeof space){
				case 'string':
				case 'String': this.indent = space.slice(0, 10);break;
				case 'number':
				case 'Number': this.indent = ' '.multiply(space > 10 ? 10 : space);break;
			}
			if(this.indent != ''){
				this.lf = String.fromCharCode(0x0A);
			}
	    	
			if(nameOf(options) != 'Object') options = {};
			this.opts = {
				encode: options.hasKey('encode') ? options.encode : true,
				keyQuotes: options.hasKey('keyQuotes') && nameOf(options.keyQuotes) == 'Array' && options.keyQuotes.length >= 2 ? options.keyQuotes : ['"', '"'],
				strQuotes: options.hasKey('strQuotes') && nameOf(options.strQuotes) == 'Array' && options.strQuotes.length >= 2 ? options.strQuotes : ['"', '"'],
				colon: options.hasKey('colon') && (nameOf(options.colon) == 'String' || typeof options.colon == 'string') ? options.colon : indent ? ': ' : ':',
				comma: options.hasKey('comma') && (nameOf(options.comma) == 'String' || typeof options.comma == 'string') ? options.comma : ',',
				throwError: options.hasKey('throwError') ? options.throwError : false
			};
			this.rep = replacer;
			this.repType = nameOf(replacer) || typeof replacer;

			var r = this.toStr({'': value}, '', '', '');
			this.opts = null;
			this.cache = null;
			return r;
		}
	};


	function JSON(){}

	JSON.prototype.parse = (function(Parse){
		return function(text, reviver, options){
			return Parse.parse(text, reviver, options);
		};
	})(Parse);

	JSON.prototype.stringify = (function(Stringify){
		return function(value, replacer, space, options){
			return Stringify.stringify(value, replacer, space, options);
		};
	})(Stringify);

	JSON.prototype.check = function(text){
	//json2.js https://github.com/douglascrockford/JSON-js から一部拝借し改変
		var reg_escape = /\\(["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
		var reg_value = /\s*("[^"\\\b\f\n\t]*"|true|false|null|-?(0|[1-9]\d*)(\.\d+)?([eE][+\-]?\d+)?)\s*/g;
		var reg_object = /\s*(\{((@:@,)*@:@)?\s*\}|\[((@,)*@)?\s*\])\s*/g;

		text = new String(text).replace(/@/g, '_').replace(reg_escape, '@');//@を_に置換してからエスケープ文字を全て@に置換
		if(text.indexOf('\') != -1) return false;//不正なエスケープ文字

		text = text.replace(reg_value, '@');//値を全て@に置換
		if(!/@@/.test(text)){//値が連続していないか確認
			do{
				text = text.replace(reg_object, '@');//入れ子がないobjcetとarrayを順に@に置換していく
			}while(reg_object.index != -1);
			if(text == '@') return true;
		}
		return false;
	};
	JSON.prototype.load = function(path, reviver, opts){
		path = path || Dorothy.matchFile + '.json';
		if(!/^[a-z]:/i.test(path)){
			common_load('DorothyEx');
			path = DorothyEx.getSaveFolder() + path.replace('^\s*\\', '');
		}
		opts = nameOf(opts) == 'Object' ? opts : {};
		if(!opts.hasKey('relaxed')) opts.relaxed = true;
		try{
			if(!(new File(path).exists())){
				throw '指定されたパスが存在しません:' + path;
			}
			var sl = new Strings();
			sl.loadFromFile(path);
			var r = this.parse(sl.text, reviver, opts);
		}catch(e){
			println('Error JSON.load: ' + e);
			println(path);
			return;//undefinedを返す
		}
		return r;
	};
	JSON.prototype.save = function(path, value, replacer, space, opts){
		path = path || Dorothy.matchFile + '.json';
		if(!/^[a-z]:/i.test(path)){
			common_load('DorothyEx');
			path = DorothyEx.getSaveFolder() + path.replace('^\s*\\', '');
		}
		try{
			space = isUndefined(space) || isNull(space) ? "\t" : space;
			opts = nameOf(opts) == 'Object' ? opts : {};
			var json = this.stringify(value, replacer, space, opts);
			dir = new Directory(new File(path).extractPath());
			if(!dir.exists()){
				dir.make();
			}
			var sl = new Strings(json);
			sl.saveToFile(path);
			println('save JSON: ' + path);
		}catch(e){
			println('Error JSON.save: ' + e);
			return false;
		}
		return true;
	};

	return new JSON();
})();