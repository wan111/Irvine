//Dorothy2
//caption=extend
//version=0.3
//hint=
//match=
//author=wan
//path=common
//end
function extend(/*deep, dest, source*/){
	function _extend(deep, dest, src){
		for(var key in src){
			if(typeof dest[key] == 'undefined') dest[key] = {};

			if(deep){
				switch(nameOf(src[key])){
					case 'Object':
						dest[key] = nameOf(dest[key]) == 'Object' ? dest[key] : {};
						break;
					case 'Array':
						dest[key] = nameOf(dest[key]) == 'Array' ? dest[key] : [];
						break;
					default:
						dest[key] = src[key];
						continue;
				}
				if(circular.check(dest[key], src[key])) dest[key] = _extend(deep, dest[key], src[key]);
				else dest[key] = circular.obj;
			}else{
				dest[key] = src[key];
			}
		}
		return dest;
	}
	//循環参照,重複している参照渡しの確認
	var circular = {
		cache: [],
		obj: {},
		check: function(dest, src){
			for(var i in cache){
				if(cache[i][1] === src){
					this.obj = cache[i][0];
					return false;
				}
			}
			cache.push([dest, src]);
			return true;
		}
	};

	var deep = false, destination, source, len = arguments.length, i = 1;
	if(typeof arguments[0] == 'boolean'){
		deep = arguments[0];
		i++;
	}

	if(len == i){
		destination = this;
		i--;
	}else{
		destination = arguments[i-1];
		if(typeof destination != 'object') destination = {};
	}
	for(; i < len; i++){
		source = arguments[i];
		if((nameOf(source) == 'Object' || nameOf(source) == 'Array')){
			circular.check(destination, source);
			destination = _extend(deep, destination, source);
		}
	}
	return destination;
},
Object.prototype.extend = extend;