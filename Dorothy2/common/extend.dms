//Dorothy2
//caption=extend
//version=0.21
//hint=
//match=
//author=wan
//path=common
//end

/*
Copyright (C) 2015 wan <thewanwan111@gmail.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

extend = (function(){
	function keys(obj){
		var key, keys,
			r = [],
			o = {},
			defaultMethods = /^(getEvents|getProperties|hasOwnProperty|getKeys|hasKey|valueOf|removeKey|toString|getMethods|constructor)$/,
			type = typeof obj,
			isObj = type == 'object',
			name = isObj && nameOf(obj),
			isPlainObject = name == 'Object',
			isArray = name == 'Array',
			isStr = type == 'string' || obj === String || obj === StringBuffer;

		if(isArray || isStr){
			for(var i = 0; i < obj.length; i++) r.push(i);
		}else if(isObj){
			if(typeof obj.getKeys == 'function'){
				keys = obj.getKeys();
				for(var i = 0; i < keys.length; i++){
					key = keys[i];
					if(isPlainObject ? typeof o[key] == 'undefined' : !defaultMethods.test(key)) r.push(key);
				}
			}
			//folderdata, prototypeはgetKeysでは取得出来ない
			if(!r.length){
				for(key in obj) r.push(key);
			}
		}
		return r;
	}

	return function(/*[deep,] [same,] [destination,] source1[, source2[, ...]]*/){
		function _extend(deep, same, destination, source){
			var dest, src, key, index, ex, destType, srcType, isUndef,
				keys = keys(source),
				len = keys.length;

			for(var i = 0; i < len; i++){
				key = keys[i];
				if(typeof source[key] == 'undefined') continue;
				src = source[key];
				isUndef = typeof destination[key] == 'undefined';
				dest = isUndef ? null : destination[key];
				destType = nameOf(dest) || typeof dest;
				srcType = nameOf(src) || typeof src;
				if(same && !isUndef && destType != srcType) continue;
				if(deep && typeof src == 'object'){
					if((index = cache.indexOf(src)) != -1){
						destination[key] = cache.dest[index];
						continue;
					}
					ex = false;
					switch(srcType){
						case 'Object':
							dest = destType == 'Object' ? dest : {};
							ex = true;
							break;
						case 'Array':
							dest = destType == 'Array' ? dest : [];
							ex = true;
							break;
						case 'Number':
							dest = new Number(src.valueOf());
							break;
						case 'Boolean':
							dest = new Boolean(src.valueOf());
							break;
						case 'RegExp':
							dest = new RegExp();
							for(var j in dest) dest[j] = src[j];
							break;
						case 'Date':
							dest = new Date(src.getTime());
							dest.format = src.format;
							break;
						case 'StringList':
							dest = new Strings(src.text);
							dest.sorted = src.sorted;
							dest.caseSensitive = src.caseSensitive;
							dest.duplicates = src.duplicates;
							break;
						case 'URL':
							dest = new URL(src.url);
							break;
						case 'Cookie':
							dest = new Cookie();
							dest.parse(src.toString());
							break;
						default:
							if(src === String){
								destination[key] = new String(src.toString());
								continue;
							}else if(src === StringBuffer){
								destination[key] = new StringBuffer(src.text);
								continue;
							}else{
								dest = src;
							}
					}
					cache.dest.push(dest);
					cache.src.push(src);
					if(ex) dest = _extend(deep, same, dest, src);
					destination[key] = dest;
				}else{
					destination[key] = src;
				}
			}
			return destination;
		}

		var source,
			destination = arguments[0],
			deep = false,
			same = false,
			index = 1,
			len = arguments.length;
			cache = {
				dest: [],
				src: [],
				indexOf: function(obj){
					var len = this.src.length;
					for(var i = 0; i < len; i++){
						if(this.src[i] === obj || this.dest[i] === obj) return i;
					}
					return -1;
				}
			};

		if(typeof destination == 'boolean'){
			deep = destination;
			destination = arguments[index];
			index++;
			if(typeof destination == 'boolean'){
				same = destination;
				destination = arguments[index];
				index++;
			}
		}
		if(len == index){
			destination = this;
			index--;
		}
		//Stringオブジェクト同士,StringBufferオブジェクト同士の比較は常にtrueとなるバグを利用
		//またこれらはブラケット表記法ではプロパティにアクセスできないので{}とする
		if(typeof destination != 'object' || (destination === String || destination === StringBuffer)){
			destination = {};
		}
		var destType = nameOf(destination);
		for(;index < len; ++index){
			source = arguments[index];
			if(typeof source == 'object' && !(destination === source)){
				if(same && destType != nameOf(source)) continue;
				cache.dest.push(destination);
				cache.src.push(source);
				destination = _extend(deep, same, destination, source);
			}
		}
		return destination;
	};
})();
