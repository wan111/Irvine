//Dorothy2
//caption=extend
//version=0.4
//hint=
//match=
//author=wan
//path=common
//end
function extend(/*deep, dest, source*/){
	function _extend(deep, dest, src){
		for(var key in src){
			if(typeof dest[key] == 'undefined') dest[key] = {};

			if(deep && typeof src[key] == 'object'){
				if(circular.check(dest[key], src[key])){
					switch(nameOf(src[key])){
						case 'Object':
							dest[key] = nameOf(dest[key]) == 'Object' ? dest[key] : {};
							break;
						case 'Array':
							dest[key] = nameOf(dest[key]) == 'Array' ? dest[key] : [];
							break;
						case 'Number':
							dest[key] = new Number(src[key].toString());
							continue;
						case 'String':
							dest[key] = new String(src[key].toString());
							circular.pop();
							continue;
						case 'Boolean':
							dest[key] = new Boolean(src[key].toString());
							continue;
						case 'RegExp':
							var s = src[key].source;
							var opt = (src[key].ignoreCase ? 'i' : '') + (src[key].global ? 'g' : '') + (src[key].multiline ? 'm' : '');
							dest[key] =  new RegExp(s, opt);
							continue;
						case 'Date':
							dest[key] = new Date(src[key].getTime());
							continue;
						case 'URL':
							dest[key] = new URL(src[key].url);
							continue;
						case 'Cookie':
							var cookie = new Cookie;
							cookie.parse(src[key].toString());
							dest[key] = cookie;
							continue;
						default:
							dest[key] = src[key];
							continue;
					}
					dest[key] = _extend(deep, dest[key], src[key]);
				}else{
					dest[key] = circular.obj;
				}
			}else{
				dest[key] = src[key];
			}
		}
		//functionå^ÇÃÉÅÉìÉo éQè∆ìnÇµ
		if(nameOf(src) == 'Object'){
			var methods = src.getMethods(), key;
			for(var i = 0; i < methods.length; i++){
				key = methods[i];
				if(!Object.hasKey(key)) dest[key] = src[key];
			}
		}
		return dest;
	}
	//èzä¬éQè∆,èdï°ÇµÇƒÇ¢ÇÈéQè∆ìnÇµÇÃämîF
	var circular = {
		cache: [],
		obj: {},
		pop: function(){
			var len = this.cache.length;
			if(len) this.cache.delete(len - 1);
		},
		check: function(dest, src){
			for(var i in cache){
				if(cache[i][1] === src){
					this.obj = cache[i][0];
					return false;
				}
			}
			cache.push([dest, src]);
			return true;
		}
	};

	var deep = false, destination, source, len = arguments.length, i = 1;
	if(typeof arguments[0] == 'boolean'){
		deep = arguments[0];
		i++;
	}

	if(len == i){
		destination = this;
		i--;
	}else{
		destination = arguments[i-1];
		if(typeof destination != 'object') destination = {};
	}
	for(; i < len; i++){
		source = arguments[i];
		if((nameOf(source) == 'Object' || nameOf(source) == 'Array')){
			if(destination == source) continue;
			circular.check(destination, source);
			destination = _extend(deep, destination, source);
		}
	}
	return destination;
},
Object.prototype.extend = extend;