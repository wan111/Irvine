//Dorothy2
//caption=extend
//version=0.1
//hint=
//match=
//author=wan
//path=common
//end

function getOwnProperties(obj, forIn){
	var keys, key,
		r = [],
		defaultMethods = /^(getEvents|getProperties|hasOwnProperty|getKeys|hasKey|valueOf|removeKey|toString|getMethods|constructor)$/,
		isPlainObject = nameOf(obj) == 'Object';
	if(!forIn && typeof obj.getKeys == 'function'){
		keys = obj.getKeys();
		for(var i = 0; i < keys.length; i++){
			key = keys[i];
			if(typeof obj[key] == 'undefined') continue;

			if(isPlainObject){
				if(Object.hasKey(key)) continue;
			}else{
				if(defaultMethods.test(key)) continue;
			}
			r.push(key);
		}
	}
	//folderdata“™‚ÍgetKeys‚ÅŽæ“¾‚Å‚«‚È‚¢‚½‚ß
	if(!r.length){
		for(key in obj){
			if(typeof obj[key] != 'undefined'){
				r.push(key);
			}
		}
	}
	return r;
},

function extend(/*[deep,] [destination,] source1[, source2[, ...]]*/){
	function _extend(deep, destination, source){
		var dest, src, key, index, ex,
			isStrObj = source === String || source === StringBuffer,
			keys = getOwnProperties(source, (nameOf(source) == 'Array' || isStrObj));

		for(var i = 0; i < keys.length; i++){
			key = keys[i];
			src = source[key];
			if(deep && typeof src == 'object'){
				if((index = cache.indexOf(src)) != -1){
					destination[key] = cache.dest[index];
					continue;
				}
				ex = false;
				switch(nameOf(src)){
					case 'Object':
						dest = typeof destination[key] != 'undefined' && nameOf(destination[key]) == 'Object' ? destination[key] : {};
						ex = true;
						break;
					case 'Array':
						dest = typeof destination[key] != 'undefined' && nameOf(destination[key]) == 'Array' ? destination[key] : [];
						ex = true;
						break;
					case 'Number':
						dest = new Number(src.valueOf());
						break;
					case 'Boolean':
						dest = new Boolean(src.valueOf());
						break;
					case 'RegExp':
						dest = new RegExp();
						for(var j in dest) dest[j] = src[j];
						break;
					case 'Date':
						dest = new Date(src.getTime());
						dest.format = src.format;
						break;
					case 'StringList':
						dest = new Strings(src.text);
						dest.sorted = src.sorted;
						dest.caseSensitive = src.caseSensitive;
						dest.duplicates = src.duplicates;
						break;
					case 'URL':
						dest = new URL(src.url);
						break;
					case 'Cookie':
						dest = new Cookie();
						dest.parse(src.toString());
						break;
					default:
						if(src === String){
							destination[key] = new String(src.toString());
							continue;
						}else if(src === StringBuffer){
							destination[key] = new StringBuffer(src.text);
							continue;
						}else{
							dest = src;
						}
				}
				cache.dest.push(dest);
				cache.src.push(src);
				if(ex) dest = _extend(deep, dest, src);
				destination[key] = dest;
			}else{
				destination[key] = src;
			}
		}
		return destination;
	}

	var source,
		destination = arguments[0],
		deep = false,
		index = 1,
		len = arguments.length;
		cache = {
			dest: [],
			src: [],
			indexOf: function(obj){
				var len = this.src.length;
				for(var i = 0; i < len; i++){
					if(this.src[i] === obj || this.dest[i] === obj) return i;
				}
				return -1;
			}
		};

	if(typeof destination == 'boolean'){
		deep = destination;
		destination = arguments[index];
		index++;
	}
	if(len == index){
		destination = this;
		index--;
	}
	if(typeof destination != 'object' || (destination === String || destination === StringBuffer)){
		destination = {};
	}

	for(;index < len; ++index){
		source = arguments[index];
		if(typeof source == 'object' && !(destination === source)){
			cache.dest.push(destination);
			cache.src.push(source);
			destination = _extend(deep, destination, source);
		}
	}
	return destination;
}
