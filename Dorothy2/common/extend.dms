//Dorothy2
//caption=extend
//version=0.2
//hint=
//match=
//author=wan
//path=common
//end
//!!!!問題あり a = {}; b={c: a, d: a} にて循環参照と判断してしまう 問題となるのは循環参照を{}等に置き換えたり無視した場合
function extend(/*deep, dest, source*/){
	function _extend(_deep, _dest, _source){
		for(var key in _source){
			if(typeof _dest[key] == 'undefined') _dest[key] = {};

			if(_deep){
				switch(nameOf(_source[key])){
					case 'Object':
						if(check(_source[key])) _dest[key] = _extend(_deep, (nameOf(_dest[key]) == 'Object' ? _dest[key] : {}), _source[key]);
						else _dest[key] = 'obj_circular';//{};
						continue;
					case 'Array':
						if(check(_source[key])) _dest[key] = _extend(_deep, (nameOf(_dest[key]) == 'Array' ? _dest[key] : []), _source[key]);
						else _dest[key] = 'arr_circular';//[];
						continue;
				}
			}
			_dest[key] = _source[key];
		}
		return _dest;
	}
	//循環参照のチェック
	function check(obj){
		for(var i in cache){
			if(cache[i] === obj) return false;
		}
		cache.push(obj);
		return true;
	}

	var deep = false, dest, source, len = arguments.length, i = 1, cache = [];
	if(typeof arguments[0] == 'boolean'){
		deep = arguments[0];
		i++;
	}

	if(len == i){
		dest = this;
		i--;
	}else{
		dest = arguments[i-1];
		if(typeof dest != 'object') dest = {};
	}
	for(; i < len; i++){
		source = arguments[i];
		if((nameOf(source) == 'Object' || nameOf(source) == 'Array') && check(source)){
			dest = _extend(deep, dest, source);
		}
	}
	return dest;
},
Object.prototype.extend = extend;
