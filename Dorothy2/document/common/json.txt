common\json.dms
===============

JSONオブジェクト

http://www.ietf.org/rfc/rfc4627
http://www.ecma-international.org/ecma-262/5.1/#sec-15.12
なるべく規格に準拠する様にしていますが一部拡張・変更しています

common_load('json');
で読み込まれた時点でJSONオブジェクト[object JSON]を定義しています

JSON.parse(text[, reviver][, options])
	説明:
		JSON文字列を解析し値に変換します
		
	引数:
		text: 解析するJSON文字列(JSON Value) 文字列以外が渡された場合は文字列に変換してから解析します
		reviver: 省略可能
			解析結果を変換する関数 オブジェクトの最もネストされたプロパティから順次呼び出され最後はルートオブジェクトとなります(ルートオブジェクトは{"":解析結果})
			プロパティの値を戻り値で置き換えます undefinedを返した場合はオブジェクトの場合はそのプロパティは削除されます
			thisはそのプロパティを含むオブジェクト
				第一引数: プロパティ名
				第二引数: プロパティの値
				第三引数(拡張): パス 最上位からのプロパティ名を順に格納した配列
				 (例)'{"a": {"b": ["c"]}}' の場合の最初は 第一引数は0, 第二引数は"c", 第三引数は ["a", "b", 0]
		options: (拡張) オプションを指定する。省略可能。オブジェクト
		{
			eval:
				デフォルトはfalse
				trueなら正規表現にて簡易的にJSONかをチェックした後にeval()を使用して変換します Relaxed Modeの場合は使用できません
			relaxed: (拡張) Relaxed Mode
				デフォルトはfalse
				falseなら正規のJSONとして解析します
				trueならRelaxed Modeで解析します
				Relaxed Modeでの仕様:
					オブジェクトのメンバー名:
						引用符無し: [A-Za-z_$][A-Za-z0-9_$]*
						引用符有り: 正規JSONと同じ(引用符は"のみ)
					数値: 0123や00 等の様に先頭に0があっても許容する
					文字列:
						制御文字が含まれていても許容する
						"〜": エスケープ文字を展開する
						'〜': エスケープ文字を展開しない
					他の値: 正規JSONと同じ
					コメント:
						/*〜*/ : /*から*/までコメント(最短一致) 値の途中に出てきたらエラー(例: {aa/*aa*/a: 1/*11*/1})
						// : これ以降改行か終端までコメント
					コンマ:
						正規JSONと同じ
			throwError:
				デフォルトはfalse
				構文が間違っていた場合やエラーの場合の処理
				trueなら throw で例外を投げます(規格準拠)
				falseなら例外は投げずにメッセージだけ表示しundefinedを返します(規格非準拠)
		}
	戻り値:
		解析結果 オブジェクトか配列か値[string,number,true or false, null]



JSON.stringify(value[, replacer][, space][, options])
	説明:
		値をJSON文字列に変換します
	引数:
		value: JSON文字列に変換する値。
		replacer: 省略可能。
			関数の場合
				変換する値を戻り値で置換します。
				ルートオブジェクト {"":value引数} から始まりネストの深い方向へ順次呼び出されます
				thisはそのプロパティを含むオブジェクト
				第一引数: プロパティ名
				第二引数: プロパティの値
				第三引数(拡張): パス 最上位からのプロパティ名を順に格納した配列
				(例){"a": {"b": ["c"]}} の場合の最後は 第一引数は0, 第二引数は"c", 第三引数は ["a", "b", 0]
			配列の場合
				ホワイトリスト及び順序指定として使用します
				配列の各値を名に持つプロパティのみを変換します。 また配列の順序で昇順にプロパティを文字列に変換します
		space: 省略可能。
			インデントに使用する文字を指定 数値の場合はその数の空白を使用します 10文字より長い場合は10文字に切り詰めます
			有効な値を指定した場合は"member:value"は"member: value"となります
		options: (拡張) オプションを指定する。省略可能。オブジェクト
		{
			encode:    デフォルトはtrue  trueならエスケープ文字に変換するfalseならしない
			keyQuotes: デフォルトは['"', '"']  プロパティ名を囲む引用符を配列で指定する
			strQuotes: デフォルトは['"', '"']  文字列値を囲む引用符を配列で指定する
			colon:     デフォルトは':'  オブジェクトのプロパティ名の後ろの文字を指定する
			comma:     デフォルトは','  オブジェクトや配列の区切りの文字を指定する
			throwError:
				デフォルトはfalse
				値が循環参照になっていた場合の処理
				trueなら throw で例外を投げます(規格準拠)
				falseなら オブジェクトの場合は{},配列の場合は[]に変換します(規格非準拠)
		}
	戻り値:
		JSON文字列。undefinedや関数を渡した場合はundefinedを返す

	もしオブジェクトにtoJSONメソッドがあった場合は呼び出してその戻り値を使う 第一引数: プロパティ名  thisはそのオブジェクト
	値がundefinedか関数の時はオブジェクトのプロパティの場合は省略、配列の要素の場合はnullに変換

JSON.check(text)
	説明: textがJSON文字列かをチェックする
	戻り値: JSON文字列ならtrue 違うならfalse

	正規表現による簡易的な確認だけなので戻り値がtrueでも実際の解析では失敗する可能性があります

JSON.load(path, reviver, options){
	説明: pathで指定されたファイルを読み取りJSON文字列として解析する
	引数:
		path: ファイルのパス
		reviver, options:
			JSON.parseの引数と同じ
			options.relaxedを指定していない場合はRelaxed Modeで解析します
	戻り値: JSON文字列。 失敗した場合はundefinedを返す

JSON.save(path, value, replacer, space, options){
	説明:
		valueをJSON文字列に変換しpathで指定されたファイルに保存する
		同名のファイルが既にあってもファイル名変更や上書きの確認は行わないので注意してください
	引数:
		path:
			ファイルのパス
			無指定の場合はファイル名は Dorothy.matchFile + '.json'
			保存フォルダはDorothy2AとDOAでの場合はアイテムの保存フォルダにDorothy2Setでの場合はDorothy.userPathになります
		value, replacer, space, options:
			JSON.stringifyの引数と同じ
			spaceを指定していない場合はspaceはタブ文字とします
	戻り値: 成功ならtrue 失敗ならfalse


更新履歴
========

- 2016/01/16 version 0.52
	.stringifyにてオブジェクトが持っていないプロパティ名をreplacer(配列)で指定するとエラーになっていた問題を修正した
	内部でいくつかの変数が共有されてしまっていた問題を修正した
	JSONオブジェクトのコードの書き方を変更した

- 2015/11/06 version 0.51
	.stringifyにてreplacerでundefinedを置換できなくなっていた問題を修正した

- 2014/12/08 version 0.50
	一から作り直し